name: CI/CD Pipeline - MovieSavanna

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 3

jobs:
  # Job 1: Test Suite
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Type check
        run: npm run check
        env:
          # Required environment variables for type checking
          SUPABASE_URL: 'https://test.supabase.co'
          SUPABASE_KEY: 'test_anon_key_for_typecheck'
          SUPABASE_SERVICE_ROLE_KEY: 'test_service_key_for_typecheck'
          TMDB_API_KEY: 'test_api_key_for_typecheck'
          TMDB_BASE_URL: 'https://api.themoviedb.org/3'
          TMDB_IMAGE_BASE_URL: 'https://image.tmdb.org/t/p'
          NODE_ENV: 'test'

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🧪 Run unit tests
        run: npm run test:unit -- --run
        env:
          # Mock environment variables for testing
          SUPABASE_URL: 'https://test.supabase.co'
          SUPABASE_KEY: 'test_anon_key_for_testing'
          SUPABASE_SERVICE_ROLE_KEY: 'test_service_key_for_testing'
          TMDB_API_KEY: 'test_api_key_12345'
          TMDB_BASE_URL: 'https://api.themoviedb.org/3'
          TMDB_IMAGE_BASE_URL: 'https://image.tmdb.org/t/p'
          NODE_ENV: 'test'
          # Additional test environment variables
          VITEST_ENV: 'true'

      - name: 🏗️ Test build
        run: npm run build
        env:
          # Mock environment variables for build test
          SUPABASE_URL: 'https://test.supabase.co'
          SUPABASE_KEY: 'test_anon_key_for_build'
          SUPABASE_SERVICE_ROLE_KEY: 'test_service_key_for_build'
          TMDB_API_KEY: 'test_api_key_12345'
          TMDB_BASE_URL: 'https://api.themoviedb.org/3'
          TMDB_IMAGE_BASE_URL: 'https://image.tmdb.org/t/p'
          NODE_ENV: 'production'

      - name: 📊 Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/
          retention-days: 30

  # Job 2: Security & Quality
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 📋 Check outdated packages
        run: npm outdated || true

      - name: 🔐 Generate security report
        run: |
          echo "# Security Audit Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          npm audit --json > npm-audit.json || true
          npm outdated --json > outdated-packages.json || true

      - name: 📎 Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            security-report.md
            npm-audit.json
            outdated-packages.json
          retention-days: 30

  # Job 3: Deploy to Vercel (only after all tests pass)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security] # Won't run if tests fail
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      # Only deploy if all previous jobs succeeded
      - name: 🚀 Deploy to Vercel via CLI
        id: vercel-deploy
        run: |
          npm install -g vercel
          echo "Deploying to Vercel..."
          DEPLOY_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes)
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Deployment completed successfully!"
          echo "Production URL: $DEPLOY_URL"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: ✅ Deployment Success Notification
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "Production URL: ${{ steps.vercel-deploy.outputs.DEPLOY_URL }}"
          echo "::notice title=Deployment Success::MovieSavanna deployed to production successfully via GitHub Actions CI/CD"
          echo "::notice title=Production URL::${{ steps.vercel-deploy.outputs.DEPLOY_URL }}"

      - name: ❌ Deployment Failure Notification
        if: failure()
        run: |
          echo "::error title=Deployment Failed::Production deployment failed. Check logs for details."
          echo "::error title=Debug Info::Vercel CLI deployment step failed - check token permissions and project configuration"

      - name: 📎 Upload deployment artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-logs
          path: |
            .vercel/
          retention-days: 7

      - name: 📊 Generate deployment summary
        if: always()
        run: |
          echo "# 🚀 Deployment Summary" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Status:** ${{ job.status }}" >> deployment-summary.md
          echo "**Commit:** ${{ github.sha }}" >> deployment-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> deployment-summary.md
          echo "**Triggered by:** ${{ github.actor }}" >> deployment-summary.md
          if [ "${{ job.status }}" = "success" ]; then
            echo "**Production URL:** ${{ steps.vercel-deploy.outputs.DEPLOY_URL }}" >> deployment-summary.md
          fi
          echo "**Deployment Time:** $(date -u)" >> deployment-summary.md

          # Add to GitHub Step Summary
          cat deployment-summary.md >> $GITHUB_STEP_SUMMARY

      - name: 📎 Upload deployment summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 30

  # Job 4: Preview Deploy (for PRs and development branch)
  preview:
    name: 🔍 Preview Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/development' && github.event_name == 'push')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        id: preview-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: 💬 Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.preview-deploy.outputs.preview-url }}';
            const commitSha = context.sha.substring(0, 7);

            const comment = `## 🚀 Preview Deployment Ready!

            **✅ All checks passed successfully**

            📱 **Preview URL:** ${previewUrl}
            🔗 **Commit:** ${commitSha}

            **✅ Test Results:**
            - Type checking passed ✅
            - Linting passed ✅  
            - Unit tests passed ✅
            - Security audit completed ✅
            - Build successful ✅

            **🔍 Review the changes and merge when ready!**

            ---
            *This preview will be automatically updated with new commits to this PR.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })

      - name: 📊 Upload preview deployment info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preview-deployment-info
          path: |
            .vercel/
          retention-days: 7

  # Job 5: Quality Report (runs after all other jobs)
  quality-report:
    name: 📊 Quality Report
    runs-on: ubuntu-latest
    needs: [test, security, deploy, preview]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
        continue-on-error: true

      - name: 📊 Generate Quality Report
        run: |
          echo "# 📊 MovieSavanna Quality Report" > quality-report.md
          echo "" >> quality-report.md
          echo "**Build Information:**" >> quality-report.md
          echo "- **Commit:** ${{ github.sha }}" >> quality-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> quality-report.md
          echo "- **Workflow:** ${{ github.workflow }}" >> quality-report.md
          echo "- **Run Number:** ${{ github.run_number }}" >> quality-report.md
          echo "- **Triggered by:** ${{ github.event_name }}" >> quality-report.md
          echo "" >> quality-report.md
          echo "**Job Results:**" >> quality-report.md
          echo "- **Tests:** ${{ needs.test.result }}" >> quality-report.md
          echo "- **Security Scan:** ${{ needs.security.result }}" >> quality-report.md
          echo "- **Production Deploy:** ${{ needs.deploy.result || 'Skipped' }}" >> quality-report.md
          echo "- **Preview Deploy:** ${{ needs.preview.result || 'Skipped' }}" >> quality-report.md
          echo "" >> quality-report.md
          echo "**Quality Checks:**" >> quality-report.md
          echo "- ✅ Type checking completed" >> quality-report.md
          echo "- ✅ Code linting passed" >> quality-report.md
          echo "- ✅ Unit tests executed" >> quality-report.md
          echo "- ✅ Security audit completed" >> quality-report.md
          echo "- ✅ Build verification completed" >> quality-report.md
          echo "" >> quality-report.md
          echo "**Generated on:** $(date -u)" >> quality-report.md

          # Display the report
          cat quality-report.md

      - name: 📎 Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md
          retention-days: 90

      - name: 📋 Summary
        run: |
          echo "::notice title=Quality Report Generated::Comprehensive quality report generated and uploaded as artifact"

          # Set job summary
          cat quality-report.md >> $GITHUB_STEP_SUMMARY
